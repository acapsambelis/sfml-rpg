////////////////////////////////////////////////////////////
//
// SFML-RPG - A top-down RPG demo
// 
// Author - Alex Capsambelis
//
////////////////////////////////////////////////////////////

#ifndef SFML_RPG_GAME
#define SFML_RPG_GAME

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////

#include <unordered_set>

#include <SFML\Graphics.hpp>

#include "WorldItems\World.hpp"
#include "Character\Player.hpp"

namespace rpg {

	////////////////////////////////////////////////////////////
	/// \brief Controlling and updating object 
	///        for player and world
	///
	////////////////////////////////////////////////////////////
	class Game
	{
	public:

		////////////////////////////////////////////////////////////
		/// \brief Default constructor
		///
		/// Initializes member variables
		///
		////////////////////////////////////////////////////////////
		Game();

		////////////////////////////////////////////////////////////
		/// \brief Destructor
		///
		////////////////////////////////////////////////////////////
		~Game();

		////////////////////////////////////////////////////////////
		/// \brief Updates player and world
		///
		/// Calls get_input, then moves and collides player
		///
		/// \param player to get movement and collide
		/// \param world to collide
		///
		////////////////////////////////////////////////////////////
		void update(Player& player, World& world);

	private:

		////////////////////////////////////////////////////////////
		/// \brief Collides player and world
		///
		/// Calls player.collide with all world.worldItem
		/// Erases the objects if the player mines them
		///
		/// \param player to get movement and collide
		/// \param world to collide
		///
		////////////////////////////////////////////////////////////
		void collide(Player& player, World& world);

		////////////////////////////////////////////////////////////
		/// \brief Gets keyboard input from player
		///
		/// \param player to get movement for. Sets player states
		///
		////////////////////////////////////////////////////////////
		sf::Vector2f get_input(Player& player);

		////////////////////////////////////////////////////////////
		// Member data
		////////////////////////////////////////////////////////////
		float     delta_time; ///< Time between game iterations
		sf::Clock clock;      ///< Used to keep track of delta_time

	};

} // namespace rpg

#endif // SFML_RPG_GAME