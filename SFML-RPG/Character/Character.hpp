////////////////////////////////////////////////////////////
//
// SFML-RPG - A top-down RPG demo
// 
// Author - Alex Capsambelis
//
////////////////////////////////////////////////////////////

#ifndef SFML_RPG_CHARACTER
#define SFML_RPG_CHARACTER

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////

#include <SFML\Graphics.hpp>

#include "WorldItems\WorldObject.hpp"

namespace rpg {

	////////////////////////////////////////////////////////////
	/// \brief Parent class of Players. Controls health/stats
	///
	////////////////////////////////////////////////////////////
	class Character : public WorldObject
	{
	public:

		////////////////////////////////////////////////////////////
		/// \brief Default constructor
		///
		/// Creates an empty Character.
		///
		////////////////////////////////////////////////////////////
		Character();

		////////////////////////////////////////////////////////////
		/// \brief Construct the Character
		///
		/// Creates a full Character
		///
		/// \param name          WorldObject name
		/// \param id            WorldObject Id number for comparing
		/// \param position      Displayable location in world
		/// \param texture_rect  Displayable rectangle for texture
		/// \param health        Health for mining
		/// \param speed         Speed scalar for movement
		///
		////////////////////////////////////////////////////////////
		Character(std::string name, int id, sf::Vector2f position,
			sf::IntRect texture_rect,
			float health, float speed);

		////////////////////////////////////////////////////////////
		/// \brief Copy constructor
		///
		/// \param copy instance to copy
		/// \param id new instance id
		/// \param position new instance position
		///
		////////////////////////////////////////////////////////////
		Character(const Character& copy, int id, sf::Vector2f position);

		////////////////////////////////////////////////////////////
		/// \brief Destructor
		///
		////////////////////////////////////////////////////////////
		~Character();

		////////////////////////////////////////////////////////////
		/// \brief Return the health of the character
		///
		/// \return health
		///
		////////////////////////////////////////////////////////////
		float get_health() { return health; }

		////////////////////////////////////////////////////////////
		/// \brief Return the speed of the character
		///
		/// \return speed
		///
		////////////////////////////////////////////////////////////
		float get_speed() { return speed; }

		////////////////////////////////////////////////////////////
		/// \brief Return the state of the character
		///
		/// \return state
		///
		////////////////////////////////////////////////////////////
		int get_state() { return state; }

		////////////////////////////////////////////////////////////
		/// \brief Return a saveable form of the character
		///
		/// \return string representation of character
		///
		////////////////////////////////////////////////////////////
		std::string get_writeable();

		////////////////////////////////////////////////////////////
		/// \brief Damage the character
		///
		/// \param amount  value to subtract from health
		///
		////////////////////////////////////////////////////////////
		void damage(float amount) { health -= amount; }

		////////////////////////////////////////////////////////////
		/// \brief Heal the character
		///
		/// \param amount  value to add from health
		///
		////////////////////////////////////////////////////////////
		void heal(float amount) { health += amount; }

		////////////////////////////////////////////////////////////
		/// \brief Set the state of the character
		///
		/// \param state to change the character to
		///
		////////////////////////////////////////////////////////////
		void set_state(int state) { this->state = state; }


	private:

		////////////////////////////////////////////////////////////
		// Member data
		////////////////////////////////////////////////////////////
		int   state;        ///< Int to keep track of what the character is doing
		float health;       ///< Health left in player
		float speed;        ///< Speed scalar for movement
	};

} // namespace rpg

#endif // SFML_RPG_CHARACTER
