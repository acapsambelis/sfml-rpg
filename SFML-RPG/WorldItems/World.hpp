////////////////////////////////////////////////////////////
//
// SFML-RPG - A top-down RPG demo
// 
// Author - Alex Capsambelis
//
////////////////////////////////////////////////////////////

#ifndef SFML_RPG_WORLD
#define SFML_RPG_WORLD

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////

#include <unordered_map>
#include <unordered_set>

#include <SFML\Graphics.hpp>

#include "Displayable.hpp"
#include "Block.hpp"

namespace rpg {

	////////////////////////////////////////////////////////////
	/// \brief Collection of all objects in a world
	///
	////////////////////////////////////////////////////////////
	class World : public Displayable
	{
	public:

		////////////////////////////////////////////////////////////
		/// \brief Default constructor
		///
		/// Creates an empty World.
		///
		////////////////////////////////////////////////////////////
		World();

		////////////////////////////////////////////////////////////
		/// \brief Construct the World
		///
		/// Creates a full World
		///
		/// \param position      Position on screen
		/// \param texture_rect  Rectangle for texture
		/// \param world_items   All WorldObjects in this World
		/// \param collision_ids All ids for collidable WorldObjects
		///
		////////////////////////////////////////////////////////////
		World(sf::Vector2f position, sf::IntRect texture_rect,
			std::unordered_map<int, Block> world_items);

		////////////////////////////////////////////////////////////
		/// \brief Destructor
		///
		////////////////////////////////////////////////////////////
		~World();

		////////////////////////////////////////////////////////////
		/// \brief Return a specific WorldItem based on an id
		///
		/// \param id WorldItem requested's id
		///
		/// \return state
		///
		////////////////////////////////////////////////////////////
		Block& get_world_item(int id) { return world_items[id]; }

		////////////////////////////////////////////////////////////
		/// \brief Return the world_item collection
		///
		/// \return world_item
		///
		////////////////////////////////////////////////////////////
		std::unordered_map<int, Block> get_world_items() { return world_items; }

		////////////////////////////////////////////////////////////
		/// \brief Adds a WorldObject to the world_items map
		///
		/// \param id      of object to be added
		/// \param object  to be added
		///
		////////////////////////////////////////////////////////////
		void add_world_item(int id, Block& object) { world_items[id] = object; }

		////////////////////////////////////////////////////////////
		/// \brief Set the world_items' sprite's texture
		///
		/// \param text to set
		///
		////////////////////////////////////////////////////////////
		void set_obj_sprite(sf::Texture& text);

		////////////////////////////////////////////////////////////
		/// \brief Removes a WorldObject from world_items
		///
		/// Check to see if the id is also in collision_ids.
		/// If so, it is removed from there as well
		///
		/// \param id
		///
		////////////////////////////////////////////////////////////
		void delete_world_item(int id) {
			world_items.erase(id);
		}

	private:
		
		friend class Display;

		////////////////////////////////////////////////////////////
		// Member data
		////////////////////////////////////////////////////////////
		std::unordered_map<int, Block>	///<
			world_items;				///< Map of WorldObject ids to WorldObjects
	};

} // namespace rpg

#endif  // SFML_RPG_WORLD
