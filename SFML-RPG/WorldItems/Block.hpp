////////////////////////////////////////////////////////////
//
// SFML-RPG - A top-down RPG demo
// 
// Author - Alex Capsambelis
//
////////////////////////////////////////////////////////////

#ifndef SFML_RPG_BLOCK
#define SFML_RPG_BLOCK

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////

#include <SFML\Graphics.hpp>

#include "Displayable.hpp"

namespace rpg {

	////////////////////////////////////////////////////////////
	/// \brief Interactable object found in a World
	///
	////////////////////////////////////////////////////////////
	class Block : public Displayable
	{
	public:

		////////////////////////////////////////////////////////////
		/// \brief Default constructor
		///
		/// Creates an empty WorldObject.
		///
		////////////////////////////////////////////////////////////
		Block();

		////////////////////////////////////////////////////////////
		/// \brief Construct the WorldObject
		///
		/// Creates a full WorldObject
		///
		/// \param name          WorldObject name
		/// \param id            Id number for comparing
		/// \param position      Displayable location in world
		/// \param texture_rect  Displayable rectangle for texture
		///
		////////////////////////////////////////////////////////////
		Block(
			std::string name, int id, sf::Vector2f position,
			sf::IntRect texture_rect
		);

		////////////////////////////////////////////////////////////
		/// \brief Copy constructor
		///
		/// \param copy     instance to copy
		/// \param id       new instance id
		/// \param position new instance position
		///
		////////////////////////////////////////////////////////////
		Block(const Block& copy, int id, sf::Vector2f position);

		////////////////////////////////////////////////////////////
		/// \brief Destructor
		///
		////////////////////////////////////////////////////////////
		~Block();

		////////////////////////////////////////////////////////////
		/// \brief Return the name of the WorldObject
		///
		/// \return name
		///
		////////////////////////////////////////////////////////////
		std::string get_name() { return name; }

		////////////////////////////////////////////////////////////
		/// \brief Return the id of the WorldObject
		///
		/// \return id
		///
		////////////////////////////////////////////////////////////
		int get_id() { return id; }

		////////////////////////////////////////////////////////////
		/// \brief Overload of == operator to use only id
		///
		/// \param other WorldObject to compare to this
		///
		/// \return if two WorldObjects are equal
		///
		////////////////////////////////////////////////////////////
		bool operator==(const Block& w) const;

		////////////////////////////////////////////////////////////
		/// \brief Collides two objects
		///
		/// \param other WorldObject to collide with this
		///
		/// \return if the objects collided
		///
		////////////////////////////////////////////////////////////
		bool update_collision(Block& other);

	private:

		////////////////////////////////////////////////////////////
		/// \brief Checks if two objects have collided
		///
		/// \param other WorldObject to collide with this
		///
		/// \return direction and magniture 
		///		in which the objects are overlapping
		///
		////////////////////////////////////////////////////////////
		sf::Vector3f check_collision(Block other);

		////////////////////////////////////////////////////////////
		/// \brief Finds the x and y amounts of overlap between two objects
		///
		/// \param other WorldObject to collide with this
		/// \param delta vector with distance between centers of WorldObjects
		///
		/// \return overlap
		///
		////////////////////////////////////////////////////////////
		sf::Vector2f find_intersect(Block other, sf::Vector2f delta);
		
		////////////////////////////////////////////////////////////
		/// \brief Finds x and y distance between
		///
		/// \param other WorldObject to collide with this
		///
		/// \return vector with distance between centers of WorldObjects
		///
		////////////////////////////////////////////////////////////
		sf::Vector2f find_delta(Block other);

		////////////////////////////////////////////////////////////
		/// \brief Moves this by react.z in react.x, react.y direction
		///
		/// \param react vector with direction and magnitude
		///
		////////////////////////////////////////////////////////////
		void bounce(sf::Vector3f react);

		////////////////////////////////////////////////////////////
		// Member data
		////////////////////////////////////////////////////////////
		int         id;   ///< Identifing integer for each object
		std::string name; ///< Name for each object
	};

} // namespace rpg

#endif // SFML_RPG_WORLDOBJECT
